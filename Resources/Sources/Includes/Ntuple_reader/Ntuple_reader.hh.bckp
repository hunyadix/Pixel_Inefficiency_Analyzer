#ifndef NTUPLE_READER_H
#define NTUPLE_READER_H

#include "Tree_initializer.hh"
#include "Histogram_lister.hh"
#include "../Console_actor/common_actors.hh"
#include "./../SmartHistos/SmartHistos.hh"

#include <iomanip>

class Ntuple_reader : public Tree_initailizer,
                      public SmartHistos
{
	private:
		int  saved_before = false;

		EventData* get_event_field() { return this -> event_field; };

		void tree_loop( TTree* tree_p, std :: string& tree_name_p );
		void event_tree_loop();
		void lumi_tree_loop();
		void run_tree_loop();
		void traj_tree_loop();
		void clust_tree_loop();
		void save_histogram_list();
	public:
		Ntuple_reader();
		Ntuple_reader( std :: string filename_p );
		~Ntuple_reader();
		void run();
};

Ntuple_reader :: Ntuple_reader()
{
	this -> AddHistoType("eventTree");
}

Ntuple_reader :: Ntuple_reader( std :: string filename_p )
{
	this -> open_input_file( filename_p );
}

Ntuple_reader :: ~Ntuple_reader()
{

}

void Ntuple_reader :: tree_loop( TTree* tree_p, std :: string& tree_name_p )
{
	std :: vector<Histogram_data*> current_histogram_list;
	for( const auto& current_histo_data : this -> histogram_list )
	{
		if( current_histo_data -> get_tree_name() == tree_name_p )
		{
			current_histogram_list.push_back( current_histo_data );
		}
	}
	Int_t n_entries = tree_p -> GetEntries();
	float percent_done = 0;
	std :: cout << std :: setw( 4 ) << "  0%";
	for( Int_t i = 0; i < n_entries; ++i ) 
	{
		tree_p -> GetEvent( i );
		for( const auto& current_histo_data : current_histogram_list )
		{
			Histogram_recipe* histogram_recipe = current_histo_data -> get_recipe();
			this -> smarthisto_list -> Fill( tree_name_p );
			/*if( current_histo_data -> get_type() == 0 )
			{
				histogram_recipe -> apply_to( current_histo_data -> get_one_dimensional_plot(),
				                              this               -> event_field,
				                              this               -> lumi_field,
				                              this               -> traj_field,
				                              this               -> traj_module_field,
				                              this               -> run_field,
				                              this               -> traj_event_field,
				                              this               -> cluster_event_field,
				                              this               -> cluster_field );
			}
			else
			{
				histogram_recipe -> apply_to( current_histo_data -> get_scatter_plot(),
				                              this               -> event_field,
				                              this               -> lumi_field,
				                              this               -> traj_field,
				                              this               -> traj_module_field,
				                              this               -> run_field,
				                              this               -> traj_event_field,
				                              this               -> cluster_event_field,
				                              this               -> cluster_field );
			}*/
		}
		if( i % 100000 == 0 )
		{
			percent_done = static_cast<float>(i) / n_entries;
			std :: cout << std :: string( 4, '\b' ) << std :: flush;
			std :: cout << std :: setw( 3 ) << static_cast<int>(percent_done * 100) << "%" << std :: flush;
		}
	}
}

void Ntuple_reader :: event_tree_loop()
{
	std :: string tree_name = "eventTree";
	this -> tree_loop( this -> event_tree, tree_name );
}

void Ntuple_reader :: lumi_tree_loop()
{
	std :: string tree_name = "lumiTree";
	this -> tree_loop( this -> lumi_tree, tree_name );
}

void Ntuple_reader :: run_tree_loop()
{
	std :: string tree_name = "runTree";
	this -> tree_loop( this -> run_tree, tree_name );
}

void Ntuple_reader :: traj_tree_loop()
{
	std :: string tree_name = "trajTree";
	this -> tree_loop( this -> traj_tree, tree_name );
}

void Ntuple_reader :: clust_tree_loop()
{
	std :: string tree_name = "clustTree";
	this -> tree_loop( this -> clust_tree, tree_name );
}

void Ntuple_reader :: save_histogram_list()
{
	//std :: cout << "Debug: save_histogram() call." << std :: endl;
	if( this -> saved_before == true )
	{
		die( "Error: There was multiple Ntuple_reader::save_histogram_list() calls.\nIt should be called only once." );
	}
	this -> saved_before = true;
	for( auto& selected_histogram : this -> histogram_list )
	{
		if( selected_histogram -> get_type() == 0 )
		{
			this -> save_histogram( selected_histogram -> get_one_dimensional_plot() );
			this -> save_histogram_as_canvas( selected_histogram -> get_one_dimensional_plot() );
		}
		else
		{
			this -> save_histogram( selected_histogram -> get_scatter_plot() );
			this -> save_histogram_as_canvas( selected_histogram -> get_scatter_plot() );
		}
	}
}


void Ntuple_reader :: run()
{
	this -> init_trees();
	std :: cout << process_prompt << std :: left << std :: setw( 40 ) << "Looping on tree: event_tree.";
	this -> event_tree_loop();
	std :: cout << std :: string( 80, '\b' );
	/*this -> lumi_tree_loop();
	this -> run_tree_loop();*/
	std :: cout << process_prompt << std :: left << std :: setw( 40 ) <<  "Looping on tree: clust_tree.";
	this -> clust_tree_loop();
	std :: cout << std :: string( 80, '\b' );
	std :: cout << process_prompt << std :: left << std :: setw( 40 ) <<  "Looping on tree: traj_tree.";
	this -> traj_tree_loop();
	std :: cout << std :: string( 80, '\b' );
	std :: cout << process_prompt << std :: left << std :: setw( 45 ) << "Looping finished." << std :: endl;
	std :: cout << process_prompt << "Saving histograms: " << std :: left << std :: setw( 30 ) << "in progress." << std :: flush;
	std :: cout << std :: string( 30, '\b' );
	this -> save_histogram_list();
	std :: cout << std :: left << std :: setw( 30 ) << "succesful." << std :: endl;
}



#endif